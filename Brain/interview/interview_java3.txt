1.进程与线程的区别是什么？
进程是执行者的应用程序，
线程是进程内部的一个执行序列。
一个进程可以有多个线程。
线程又叫做轻量级进程。

12、创建线程有几种不同的方式？
继承Thread类
实现Runnable接口
应用程序可以使用Executor框架来创建线程池

实现Runnable接口这种方式更受欢迎，因为这不需要继承Thread类。
在应用设计中已经继承了别的对象的情况下，
这需要多继承（而java不支持多继承），
只能实现接口。
同时，线程池也是非常高效的，很容易实现和使用。

13.线程的几种可用状态
就绪（Runnable）：线程准备进行，不一定立马就能开始执行。
运行中（Running）：进程正在执行线程的代码。
等待中（waiting）：线程处于堵塞的状态，等待外部的处理结果。
睡眠中（Sleeping）：线程被强制睡眠
I/O阻塞（Blocked on I/O）:等待I/O操作完成
同步阻塞（Blocked On synchronized）：等待获取锁
死亡（Dead）：线程完成了执行

14.同步方法和同步代码块的区别是什么？
在Java语言中，每一个对象有一把锁。
线程可以使用Synchronized关键字来获取对象上的锁。

Synchronized关键字可应用在方法级别（粗粒度锁）
或者是代码块级别（细粒度锁）

15、在监视器（Monitor）内部，是如何做到线程同步的？程序应该做哪种级别的同步？
监视器和锁在Java虚拟机中是一块使用的。
监视器监视一块同步代码块，确保一次只有一个线程执行同步代码块。

每一个监视器都和一个对象引用相关联。
线程在获取锁之前不允许执行同步代码。

16、什么是死锁（deadlock）?
两个进程都在等待对方执行完毕，
才能继续往下执行的时候就发生了死锁。
结果就是两个进程都陷入了无限的等待中。

17、如何确保n个线程可以访问n个资源的同时，又不发生死锁？
使用多线程的时候，比较简单的避免死锁的方式就是：
指定获取锁的顺序，并强制线程按照指定的顺序获取锁。

因此，如果所有的线程都是，
以同样的顺序加载锁和释放锁，就不会出现死锁了。

18、Java集合类框架的基本接口都有哪些？
Java集合类提供了一套设计良好的支持对一组对象进行操作的接口和类。
Java集合类里面最基本的接口有：
Collection：代表一组对象，每一个对象都是它的子元素。
Set：不包含重复元素的collection。
List：有顺序的collection,并且可以包含重复元素。
Map: 可以把键（key）映射到值（value）的对象，键不能够重复。

集合类接口指定了一组叫做元素的对象。
集合类接口的每一种具体的实现类都可以，
选择以它自己的方式对元素进行保存和排序。
有的集合类允许重复的键，有些不允许。


19、为什么集合类没有实现Cloneable和Serializable接口？

克隆(cloning)或者是序列化(serialization)的语义和含义是跟具体的实现相关的。
因此，应该由集合类的具体实现来决定如何被克隆或者是序列化。

Integer实现了Serializable,所以可以把一个Integer的对象用IO写到文件里，
之后再可以从文件里读出，如你开始写入的时候那个对象的intValue() 是5的话，
那读出来之后也是5。这一点体现了用序化类的作用，即用来传送类的对象。

20. 什么是迭代器(Iterator) 
Interator接口提供了很多对集合元素进行迭代的方法。
每一个集合类都包含了可以返回迭代器实例的迭代方法。
迭代器可以在迭代的过程中删除底层集合的元素。

