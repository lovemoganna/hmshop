21、Iterator和ListInteritor的区别？

Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。
Iterator对集合只能是前向遍历，ListIterator也可以向前，也可以向后遍历。
ListIterator实现了Iterator接口，并包含其他的功能，比如：增加、替换元素，
获取前一个和后一个元素的索引，等等。

22、快速失败（fail-fast）和安全失败（fail-safe）的区别是什么？


Java.util包下面的所有的集合类都是快速失败的，
而java.util.concurrent包下面的所有的类都是安全失败的。

快速失败的迭代器会抛出ConcurrentModificationException异常，而安全失败的
迭代器永远不会抛出这样的异常。

Iterator的安全失败是基于对底层集合做拷贝，
因此，它不受源集合上修改的影响。

23、Java中的HashMap的工作原理是什么？
Java中的HashMap是以键值对（key_value）的形式存储元素的。
HashMap需要一个hash函数，它使用hashcode()和equals()方法来向集合
或者是从集合添加和检索元素。
当调用put()方法的时候，HashMap会计算key的hash值，然后把键值对存储
在集合中合适的索引上。

如果key已经存在了，value会被更新成新值。
HashMap的一些重要的特性是它的容量（Capacity），
负载因子（load factory）和扩容极限（threshold resizing）

24、hashcode()和equals()方法的重要性体现在什么地方？
Java中的HashMap使用hashcode()和equals()方法来确定键值对的索引，
当根据键获得值的时候也会用到这两个方法。

如果没有正确的实现这两个方法，两个不同的键可能会有相同的hash值，
所以，
可能会被集合认为是相等的。

而且，这两个方法也用来发现重复元素。
所以这两个方法的实现对hashMap的精确性和正确性是至关重要的。

25、HashMap和Hashtable有什么区别？
HashMap和Hashtable都实现了Map接口，因此很多特性非常相似。但是，他们有以下不同点：
HashMap允许键和值是Null,而Hashtable不允许键或者值是null;

HashMap不是同步的，Hashtable是同步的。
所以HashMap适用于单线程环境，Hashtable适用于多线程环境。

HashMap提供了可供应迭代的键的集合，因此，HashMap是快速失败的。

Hashtable提供了对键的列举（Enumeration）

一般认为Hashtable是一个遗留的类。

26、数组(Array)和列表(ArrayList)有什么区别？
什么时候该使用Array而不是ArrayList？

Array可以包含基本类型和对象类型，ArrayList只能包含对象类型。
Array大小是固定的，ArrayList的大小是动态变化的。
ArrayList提供了更多的方法和特性，比如：addAll(),removeAll(),iteraotr()等等。

对于基本类型数据，集合使用自动装箱来减少编码工作量。

但是，处理固定大小的基本数据类型的时候，这种方式相对比较慢。

27、ArrayList和LinkedList的区别？
ArrayList和LinkedList都实现了List接口，他们有以下的特点：

ArrayList是基于索引的数据接口，它的底层是数组。
它可以以O(1)时间复杂度对元素进行随机访问。

与此对应，LinkedList是以元素的形式存储它的数据，
每一个元素都和它的前一个和后一个元素链接在一起，
在这种情况下，查找某个元素的时间复杂度是O(n)。

相对于ArrayList，LinkedList的插入，添加，删除速度更快，因为
当元素被添加到集合任意位置的时候，不需要想数组那样重新计算大小
或者是更新索引。

LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用
，一个指向前一个元素，一个指向下一个元素。

ArrayList VS  LinkedList .

28、Comparable和Comparator接口的用处和不同之处？

Java提供了只包含一个CompareTo()方法的Comparable接口。
这个方法可以给两个对象排序。
具体来说，返回负数，输出0.
正数来表明输入对象<  =  > 已经存在的对象。

Java 提供了包含 compare()和 equals()两个方法的 Comparator 接口。
compare()方法用来给两个输入参数排序，返回负数，0，
正数表明第一个参数是小于，等于，大于第二个参数。

equals()方法需要一个对象作为参数，
它用来决定输入参数是否和 comparator 相等。

只有当输入参数也是一个 comparator 并且输入参数和
当前 comparator 的排序结果是相同的时候，这个方
法才返回 true。


29、什么是Java priority queue?（Java优先队列）
Priority queue是一个基于优先堆的无界队列，它的元素是按照自然顺序(natural order)
排序的。
在创建的时候，我们可以给它提供一个负责给元素排序的比较器。

priorityQueue不允许null值，因为他们没有自然顺序，或者说他们没有任何相关联的比较器。
最后，PriorityQueue不是线程安全的，入队和出队的复杂度是O(log(n)).

30、你了解大O符号（big_Onotation）么？你能给出不同数据结构的例子吗？

大O符号描述了当数据结构里面的元素增加的时候，
算法的规模或者是性能在最坏的场景下有多么好。

大O符号也可用来描述其他的行为，比如：内存消耗。
因为集合类实际上是数据结构，我们一般使用大O符号基于时间，
内存和性能来选择最好的实现。
大O符号可以对大量的数据的性能给出一个很好的说明。




